name: CI
on:
  push:
    branches: [ main ]
  pull_request:
  merge_group:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 1 * *'

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        poetry-version: ["1.2.2", "1.7.1"]
        os: [ubuntu-latest]
        include:
        - python-version: "3.11"
          poetry-version: "1.7.1"
          os: macos-latest
        - python-version: "3.11"
          poetry-version: "1.7.1"
          os: windows-latest
        - python-version: "3.11"
          poetry-version: "1.7.1"
          os: ubuntu-latest
          annotate-errors: true
    runs-on: ${{ matrix.os }}
    concurrency:
      group: ${{ github.workflow }}-${{ matrix.python-version }}-${{ matrix.poetry-version }}-${{ matrix.os }}-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - uses: abatilo/actions-poetry@v2
      with:
        poetry-version: ${{ matrix.poetry-version }}
    - name: Setup a local virtual environment
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based
      with:
        path: ./.venv
        key: venv-${{ hashFiles('pyproject.toml') }}-${{ matrix.python-version }}-${{ matrix.poetry-version }}-${{ matrix.os }}
    - name: Install the project dependencies
      run: poetry install
    - uses: liskin/gh-problem-matcher-wrap@v3
      with:
        action: add
        linters: flake8
      if: matrix.annotate-errors
    - name: Lint with flake8
      run: |
        # < 7 to avoid ./.venv/lib/python3.11/site-packages/sympy/polys/numberfields/resolvent_lookup.py: "pyflakes[F]" failed during execution due to RecursionError('maximum recursion depth exceeded')
        pip install 'flake8<7'
        # stop the build if there are Python syntax errors or undefined names
        make git-lint FLAKE8_EXTRA_FLAGS=--exit-zero # TODO: remove --exit-zero
        # exit-zero treats all errors as warnings
        make git-lint-more FLAKE8_EXTRA_FLAGS=--exit-zero
    - uses: liskin/gh-problem-matcher-wrap@v3
      with:
        action: remove
        linters: flake8
      if: matrix.annotate-errors
    #- name: Run the automated tests (for example)
    #  run: poetry run pytest -v
    - run: wandb login --anonymously
    - run: make test-load-experiments -k || true

  check-all:
    runs-on: ubuntu-latest
    needs: ci
    if: always()
    steps:
    - run: echo 'ci passed'
      if: ${{ needs.ci.result == 'success' }}
    - run: echo 'ci failed' && false
      if: ${{ needs.ci.result != 'success' }}
