name: Generate Data
on:
  push:
    branches: [ max-of-*-cache ]
  workflow_dispatch:
    inputs:
      plots:
        description: 'Construct plots (passes --no-plots if false)'
        required: false
        default: false
        type: boolean

jobs:
  install-deps:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
        poetry-version: ["1.7.1"]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    concurrency:
      group: ${{ github.workflow }}-${{ matrix.python-version }}-${{ matrix.poetry-version }}-${{ matrix.os }}-deps-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        repository: JasonGross/guarantees-based-mechanistic-interpretability
    - uses: actions/cache/restore@v4
      name: Define a cache for the virtual environment
      id: cache-venv
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}-${{ matrix.python-version }}-${{ matrix.poetry-version }}-${{ matrix.os }}
        lookup-only: true
    - uses: actions/setup-python@v5
      if: steps.cache-venv.outputs.cache-hit != 'true'
      with:
        python-version: ${{ matrix.python-version }}
    - uses: abatilo/actions-poetry@v3
      if: steps.cache-venv.outputs.cache-hit != 'true'
      with:
        poetry-version: ${{ matrix.poetry-version }}
    - name: Setup a local virtual environment
      if: steps.cache-venv.outputs.cache-hit != 'true'
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    # - name: download etc/free_disk_space.sh
    #   run: |
    #     mkdir -p etc
    #     cd etc
    #     wget https://raw.githubusercontent.com/JasonGross/guarantees-based-mechanistic-interpretability-with-data/main/etc/free_disk_space.sh
    #     chmod +x free_disk_space.sh
    # - run: etc/free_disk_space.sh
    - name: Install the project dependencies
      if: steps.cache-venv.outputs.cache-hit != 'true'
      run: poetry install
    - name: Save cache
      if: steps.cache-venv.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: ./.venv
        key: ${{ steps.cache-venv.outputs.cache-primary-key }}

  build-e-c-t:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-e-c-t-${{ github.head_ref || github.run_id }}
      cancel-in-progress: true
    steps:
    # - uses: actions/checkout@v4
    #   with:
    #     submodules: recursive
    - uses: actions/cache@v4
      name: Define a cache for e-c-t
      with:
        path: /tmp/Efficient-Compression-Tool
        key: Efficient-Compression-Tool
    - name: clone Efficient-Compression-Tool
      run: |
        cd /tmp
        test -d Efficient-Compression-Tool || git clone --recursive https://github.com/fhanau/Efficient-Compression-Tool.git
    - name: update Efficient-Compression-Tool
      run: |
        ( cd /tmp/Efficient-Compression-Tool && git pull )
    - name: build Efficient-Compression-Tool
      run: |
        cd /tmp/Efficient-Compression-Tool
        mkdir -p build
        cd build
        cmake ../src
        make
    - name: install Efficient-Compression-Tool
      run: sudo make install -C /tmp/Efficient-Compression-Tool/build
    - name: test Efficient-Compression-Tool
      run: ect -h

  seeds:
    if: false
    strategy:
      fail-fast: false
      matrix:
        seeds:
          # - "123"

          - "50,104,123,519,742,913,1185,1283"
          - "1412,1490,1681,1696,1895,1951,2236,2306"
          - "2345,2549,2743,2773,3175,3254,3284,4157"
          - "4305,4430,4647,4729,4800,4810,5358,5615"
          - "5781,5928,6082,6155,6159,6204,6532,6549"
          - "6589,6910,7098,7238,7310,7467,7790,7884"
          - "8048,8299,8721,8745,8840,8893,9132,9134"
          - "9504,9816,10248,11124,11130,11498,11598,11611"
          - "12141,12287,12457,12493,12552,12561,13036,13293"
          - "13468,13654,13716,14095,14929,15043,15399,15622"
          - "15662,16069,16149,16197,16284,17080,17096,17194"
          - "17197,18146,18289,18668,19004,19093,19451"
          - "19488,19538,19917,20013,20294,20338,20415"
          - "20539,20751,20754,20976,21317,21598,22261"
          - "22286,22401,22545,23241,23367,23447,23633"
          - "23696,24144,24173,24202,24262,24438,24566"
          - "25516,26278,26374,26829,26932,27300,27484"
          - "27584,27671,27714,28090,28716,28778,29022"
          - "29052,29110,29195,29565,29725,29726,30371"
          - "30463,30684,30899,31308,32103,32374,32382"
        python-version: ["3.10"]
        poetry-version: ["1.7.1"]
        poetry-install-extra-args: [""]
        os: [ubuntu-latest]
        cfg:
          - { nctx: 4, dvocab: 64, extra-args: "--brute-force", extra-args-file-descr: "brute-force" }
          - { nctx: 5, dvocab: 64, extra-args: "", extra-args-file-descr: "" }
          - { nctx: 10, dvocab: 64, extra-args: "", extra-args-file-descr: "" }
          - { nctx: 10, dvocab: 128, extra-args: "", extra-args-file-descr: "" }
          - { nctx: 20, dvocab: 64, extra-args: "", extra-args-file-descr: "" }
          - { nctx: 20, dvocab: 512, extra-args: "", extra-args-file-descr: "" }
    needs: [install-deps, build-e-c-t]
    runs-on: ${{ matrix.os }}
    concurrency:
      # group: ${{ github.workflow }}-${{ matrix.python-version }}-${{ matrix.poetry-version }}-${{ matrix.os }}-${{ matrix.seeds }}-${{ matrix.cfg.nctx }}-${{ matrix.cfg.dvocab }}-${{ github.head_ref || github.run_id }}
      group: seeds-${{ matrix.seeds }}-${{ matrix.cfg.nctx }}-${{ matrix.cfg.dvocab }}-${{ matrix.cfg.extra-args-file-descr }}-${{ github.ref }}
      cancel-in-progress: true
    steps:
    - name: Check if branch ${{ github.ref }} matches the nctx=${{ matrix.cfg.nctx }} and dvocab=${{ matrix.cfg.dvocab }}
      id: check-branch
      run: |
        branch_name="${GITHUB_REF#refs/heads/}"
        nctx_value="${branch_name#max-of-}"
        nctx_value="${nctx_value%-cache}"
        if [[ "$nctx_value" == *"-dvocab-"* ]]; then
            dvocab_value="${nctx_value#*-dvocab-}"
            nctx_value="${nctx_value%-dvocab-*}"
        else
            dvocab_value="64"
        fi
        printf "GITHUB_REF=%s\nbranch_name=%s\nnctx=%s\ndvocab=%s\n" "$GITHUB_REF" "$branch_name" "$nctx_value" "$dvocab_value"
        if [ "$nctx_value" = "${{ matrix.cfg.nctx }}" ] && [ "$dvocab_value" = "${{ matrix.cfg.dvocab }}" ]; then
            echo "match=true" >> $GITHUB_OUTPUT
        else
            echo "match=false" >> $GITHUB_OUTPUT
        fi
    - uses: actions/cache@v4
      if: steps.check-branch.outputs.match == 'true'
      name: Define a cache for e-c-t
      with:
        path: /tmp/Efficient-Compression-Tool
        key: Efficient-Compression-Tool
    - name: Backup build of Efficient-Compression-Tool
      if: steps.check-branch.outputs.match == 'true'
      run: |
        cd /tmp
        test -d Efficient-Compression-Tool || {
          git clone --recursive https://github.com/fhanau/Efficient-Compression-Tool.git;
          cd Efficient-Compression-Tool;
          mkdir -p build;
          cd build;
          cmake ../src;
          make;
        }
    - name: install Efficient-Compression-Tool
      if: steps.check-branch.outputs.match == 'true'
      run: sudo make install -C /tmp/Efficient-Compression-Tool/build
    - name: free disk space
      if: steps.check-branch.outputs.match == 'true'
      run: |
        cd /tmp
        wget https://raw.githubusercontent.com/JasonGross/guarantees-based-mechanistic-interpretability-with-data/main/etc/free_disk_space.sh
        chmod +x free_disk_space.sh
        ./free_disk_space.sh 2>&1
    - uses: actions/checkout@v4
      if: steps.check-branch.outputs.match == 'true'
      with:
        submodules: recursive
    - run: df -h
      if: steps.check-branch.outputs.match == 'true'
    - name: support perf
      if: steps.check-branch.outputs.match == 'true'
      run: |
        sudo sh -c 'echo 0 >/proc/sys/kernel/perf_event_paranoid'
        sudo sh -c 'echo 0 >/proc/sys/kernel/kptr_restrict'
    - uses: actions/setup-python@v5
      if: steps.check-branch.outputs.match == 'true'
      with:
        python-version: ${{ matrix.python-version }}
    - uses: abatilo/actions-poetry@v3
      if: steps.check-branch.outputs.match == 'true'
      with:
        poetry-version: ${{ matrix.poetry-version }}
    - name: Setup a local virtual environment
      if: steps.check-branch.outputs.match == 'true'
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local
    - uses: actions/cache@v4
      if: steps.check-branch.outputs.match == 'true'
      name: Define a cache for the virtual environment based
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}-${{ matrix.python-version }}-${{ matrix.poetry-version }}-${{ matrix.os }}
    - run: df -h
      if: steps.check-branch.outputs.match == 'true'
    - name: Install the project dependencies
      if: steps.check-branch.outputs.match == 'true'
      run: poetry install ${{ matrix.poetry-install-extra-args }}
    - run: df -h
      if: steps.check-branch.outputs.match == 'true'
    - name: Login to Hugging Face
      if: steps.check-branch.outputs.match == 'true'
      run: poetry run huggingface-cli login --token ${{ secrets.HF_TOKEN }}
    - run: poetry run wandb login --anonymously
      if: steps.check-branch.outputs.match == 'true'
    - run: sudo apt-get update -y
      if: steps.check-branch.outputs.match == 'true'
    - run: sudo apt-get install -y texlive dvipng texlive-latex-extra texlive-fonts-recommended cm-super pngcrush optipng texlive-extra-utils
      if: steps.check-branch.outputs.match == 'true'
    - run: df -h
      if: steps.check-branch.outputs.match == 'true'
    - run: timeout 5h poetry run python notebooks_jason/max_of_K_all_models.py --K ${{ matrix.cfg.nctx }} --d_vocab ${{ matrix.cfg.dvocab }} --seeds ${{ matrix.seeds }} -j1 --ignore-csv ${{ matrix.cfg.extra-args }} ${{ ((github.event_name != 'workflow_dispatch' || github.event.inputs.plots != 'true') && '--no-plots') || '' }}
      if: steps.check-branch.outputs.match == 'true'
    - run: |
        # if [[ "${{ matrix.seeds }}" == *","* ]]; then
        #   FILES="$( (ls notebooks_jason/.cache/max_of_${{ matrix.cfg.nctx }}.py.*-{${{ matrix.seeds }}}_*; git ls-files --others --exclude-standard notebooks_jason/.cache; git ls-files -m notebooks_jason/.cache) | sort | uniq)"
        # else
        #   FILES="$( (ls notebooks_jason/.cache/max_of_${{ matrix.cfg.nctx }}.py.*-${{ matrix.seeds }}_*; git ls-files --others --exclude-standard notebooks_jason/.cache; git ls-files -m notebooks_jason/.cache) | sort | uniq)"
        # fi
        { git ls-files --others --exclude-standard notebooks_jason/.cache; git ls-files -m notebooks_jason/.cache; } | xargs tar -czvf seeds-${{ matrix.seeds }}-${{ matrix.cfg.nctx }}-${{ matrix.cfg.dvocab }}-${{ matrix.cfg.extra-args-file-descr }}.tar.gz
      if: always () && steps.check-branch.outputs.match == 'true'
    - run: tar -czvf plots-${{ matrix.seeds }}-${{ matrix.cfg.nctx }}-${{ matrix.cfg.dvocab }}-${{ matrix.cfg.extra-args-file-descr }}.tar.gz notebooks_jason/max_of_${{ matrix.cfg.nctx }}_all_models/
      if: steps.check-branch.outputs.match == 'true'
    - name: upload seeds ${{ matrix.seeds }}
      uses: actions/upload-artifact@v4
      with:
        name: cache-${{ matrix.cfg.nctx }}-${{ matrix.cfg.dvocab }}-${{ matrix.seeds }}-${{ matrix.cfg.extra-args-file-descr }}
        path: seeds-${{ matrix.seeds }}-${{ matrix.cfg.nctx }}-${{ matrix.cfg.dvocab }}-${{ matrix.cfg.extra-args-file-descr }}.tar.gz
        retention-days: 3
      if: always () && steps.check-branch.outputs.match == 'true'
    - name: upload plots ${{ matrix.seeds }}
      uses: actions/upload-artifact@v4
      with:
        name: plots-${{ matrix.cfg.nctx }}-${{ matrix.cfg.dvocab }}-${{ matrix.seeds }}-${{ matrix.cfg.extra-args-file-descr }}
        path: plots-${{ matrix.seeds }}-${{ matrix.cfg.nctx }}-${{ matrix.cfg.dvocab }}-${{ matrix.cfg.extra-args-file-descr }}.tar.gz
        retention-days: 3
      if: always () && steps.check-branch.outputs.match == 'true'

  merge:
    runs-on: ubuntu-latest
    needs: seeds
    if: always()
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          retention-days: 3
